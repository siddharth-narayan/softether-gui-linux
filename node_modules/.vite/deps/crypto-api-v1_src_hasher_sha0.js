import "./chunk-RSJERJUL.js";

// node_modules/crypto-api-v1/src/hasher/hasher.mjs
var Hasher = class {
  /**
   * @param {Object} options
   * @constructor
   */
  constructor(options) {
    this.unitSize = 4;
    this.unitOrder = 0;
    this.blockSize = 16;
    this.blockSizeInBytes = this.blockSize * this.unitSize;
    this.options = options || {};
    this.reset();
  }
  /**
   * Reset hasher to initial state
   */
  reset() {
    this.state = {};
    this.state.message = "";
    this.state.length = 0;
  }
  /**
   * Return current state
   *
   * @returns {Object}
   */
  getState() {
    return JSON.parse(JSON.stringify(this.state));
  }
  /**
   * Set current state
   *
   * @param {Object} state
   */
  setState(state) {
    this.state = state;
  }
  /**
   * Update message from binary string
   *
   * @param {string} message
   */
  update(message) {
    this.state.message += message;
    this.state.length += message.length;
    this.process();
  }
  /**
   * Process ready blocks
   *
   * @protected
   */
  process() {
  }
  /**
   * Finalize hash and return result
   *
   * @returns {string}
   */
  finalize() {
    return "";
  }
  /**
   * Get hash from state
   *
   * @protected
   * @param {number} [size=this.state.hash.length] - Limit hash size (in chunks)
   * @returns {string}
   */
  getStateHash(size) {
    return "";
  }
  /**
   * Add PKCS7 padding to message
   * Pad with bytes all of the same value as the number of padding bytes
   *
   * @protected
   * @param {number} length
   */
  addPaddingPKCS7(length) {
    this.state.message += new Array(length + 1).join(String.fromCharCode(length));
  }
  /**
   * Add ISO7816-4 padding to message
   * Pad with 0x80 followed by zero bytes
   *
   * @protected
   * @param {number} length
   */
  addPaddingISO7816(length) {
    this.state.message += "Â€" + new Array(length).join("\0");
  }
  /**
   * Add zero padding to message
   * Pad with 0x00 characters
   *
   * @protected
   * @param {number} length
   */
  addPaddingZero(length) {
    this.state.message += new Array(length + 1).join("\0");
  }
};
var hasher_default = Hasher;

// node_modules/crypto-api-v1/src/hasher/hasher32be.mjs
var Hasher32be = class extends hasher_default {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    super(options);
    this.unitOrder = 1;
    this.blockUnits = [];
  }
  /**
   * Process ready blocks
   *
   * @protected
   */
  process() {
    while (this.state.message.length >= this.blockSizeInBytes) {
      this.blockUnits = [];
      for (let b = 0; b < this.blockSizeInBytes; b += 4) {
        this.blockUnits.push(
          this.state.message.charCodeAt(b) << 24 | this.state.message.charCodeAt(b + 1) << 16 | this.state.message.charCodeAt(b + 2) << 8 | this.state.message.charCodeAt(b + 3)
        );
      }
      this.state.message = this.state.message.substr(this.blockSizeInBytes);
      this.processBlock(this.blockUnits);
    }
  }
  /**
   * Process ready blocks
   *
   * @protected
   * @param {number[]} M
   */
  processBlock(M) {
  }
  /**
   * Get hash from state
   *
   * @protected
   * @param {number} [size=this.state.hash.length] - Limit hash size (in chunks)
   * @returns {string}
   */
  getStateHash(size) {
    size = size || this.state.hash.length;
    let hash = "";
    for (let i = 0; i < size; i++) {
      hash += String.fromCharCode(this.state.hash[i] >> 24 & 255) + String.fromCharCode(this.state.hash[i] >> 16 & 255) + String.fromCharCode(this.state.hash[i] >> 8 & 255) + String.fromCharCode(this.state.hash[i] & 255);
    }
    return hash;
  }
  /**
   * Add to message cumulative size of message in bits
   *
   * @protected
   */
  addLengthBits() {
    this.state.message += "\0\0\0" + String.fromCharCode(this.state.length >> 29 & 255) + String.fromCharCode(this.state.length >> 21 & 255) + String.fromCharCode(this.state.length >> 13 & 255) + String.fromCharCode(this.state.length >> 5 & 255) + String.fromCharCode(this.state.length << 3 & 255);
  }
};
var hasher32be_default = Hasher32be;

// node_modules/crypto-api-v1/src/tools/tools.mjs
function rotateLeft(x, n) {
  return x << n | x >>> 32 - n | 0;
}

// node_modules/crypto-api-v1/src/hasher/sha0.mjs
var K = [1518500249, 1859775393, 2400959708, 3395469782];
var Sha0 = class extends hasher32be_default {
  /**
   * @param {Object} [options]
   * @param {number} [options.rounds=80] - Number of rounds (Must be greater than 16)
   */
  constructor(options) {
    super(options);
    this.options.rounds = this.options.rounds || 80;
    this.W = new Array(80);
  }
  /**
   * Reset hasher to initial state
   */
  reset() {
    super.reset();
    this.state.hash = [
      1732584193 | 0,
      4023233417 | 0,
      2562383102 | 0,
      271733878 | 0,
      3285377520 | 0
    ];
  }
  /**
   * Process ready blocks
   *
   * @protected
   * @ignore
   * @param {number[]} block - Block
   */
  processBlock(block) {
    let a = this.state.hash[0] | 0;
    let b = this.state.hash[1] | 0;
    let c = this.state.hash[2] | 0;
    let d = this.state.hash[3] | 0;
    let e = this.state.hash[4] | 0;
    for (let i = 0; i < this.options.rounds; i++) {
      if (i < 16) {
        this.W[i] = block[i] | 0;
      } else {
        this.W[i] = this.W[i - 3] ^ this.W[i - 8] ^ this.W[i - 14] ^ this.W[i - 16] | 0;
      }
      let t = rotateLeft(a, 5) + e + this.W[i] + K[i / 20 >> 0] | 0;
      if (i < 20) {
        t = t + (b & c | ~b & d) | 0;
      } else if (i < 40) {
        t = t + (b ^ c ^ d) | 0;
      } else if (i < 60) {
        t = t + (b & c | b & d | c & d) | 0;
      } else {
        t = t + (b ^ c ^ d) | 0;
      }
      e = d;
      d = c;
      c = rotateLeft(b, 30) | 0;
      b = a;
      a = t;
    }
    this.state.hash[0] = this.state.hash[0] + a | 0;
    this.state.hash[1] = this.state.hash[1] + b | 0;
    this.state.hash[2] = this.state.hash[2] + c | 0;
    this.state.hash[3] = this.state.hash[3] + d | 0;
    this.state.hash[4] = this.state.hash[4] + e | 0;
  }
  /**
   * Finalize hash and return result
   *
   * @returns {string}
   */
  finalize() {
    this.addPaddingISO7816(
      this.state.message.length < 56 ? 56 - this.state.message.length | 0 : 120 - this.state.message.length | 0
    );
    this.addLengthBits();
    this.process();
    return this.getStateHash();
  }
};
var sha0_default = Sha0;
export {
  sha0_default as default
};
//# sourceMappingURL=crypto-api-v1_src_hasher_sha0.js.map
