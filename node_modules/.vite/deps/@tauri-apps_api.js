import {
  m
} from "./chunk-X425TAC3.js";
import {
  n,
  q
} from "./chunk-3XMIQ745.js";
import {
  x
} from "./chunk-EYJTSB3H.js";
import {
  a,
  c,
  e,
  f,
  s
} from "./chunk-KD5XTCN6.js";

// node_modules/@tauri-apps/api/chunk-3WDDWFXT.js
var W = {};
e(W, { TauriEvent: () => c2, emit: () => D, listen: () => E, once: () => _ });
async function s2(n7, t5) {
  return a({ __tauriModule: "Event", message: { cmd: "unlisten", event: n7, eventId: t5 } });
}
async function m2(n7, t5, i6) {
  await a({ __tauriModule: "Event", message: { cmd: "emit", event: n7, windowLabel: t5, payload: i6 } });
}
async function o(n7, t5, i6) {
  return a({ __tauriModule: "Event", message: { cmd: "listen", event: n7, windowLabel: t5, handler: s(i6) } }).then((r2) => async () => s2(n7, r2));
}
async function u(n7, t5, i6) {
  return o(n7, t5, (r2) => {
    i6(r2), s2(n7, r2.id).catch(() => {
    });
  });
}
var c2 = ((e2) => (e2.WINDOW_RESIZED = "tauri://resize", e2.WINDOW_MOVED = "tauri://move", e2.WINDOW_CLOSE_REQUESTED = "tauri://close-requested", e2.WINDOW_CREATED = "tauri://window-created", e2.WINDOW_DESTROYED = "tauri://destroyed", e2.WINDOW_FOCUS = "tauri://focus", e2.WINDOW_BLUR = "tauri://blur", e2.WINDOW_SCALE_FACTOR_CHANGED = "tauri://scale-change", e2.WINDOW_THEME_CHANGED = "tauri://theme-changed", e2.WINDOW_FILE_DROP = "tauri://file-drop", e2.WINDOW_FILE_DROP_HOVER = "tauri://file-drop-hover", e2.WINDOW_FILE_DROP_CANCELLED = "tauri://file-drop-cancelled", e2.MENU = "tauri://menu", e2.CHECK_UPDATE = "tauri://update", e2.UPDATE_AVAILABLE = "tauri://update-available", e2.INSTALL_UPDATE = "tauri://update-install", e2.STATUS_UPDATE = "tauri://update-status", e2.DOWNLOAD_PROGRESS = "tauri://update-download-progress", e2))(c2 || {});
async function E(n7, t5) {
  return o(n7, null, t5);
}
async function _(n7, t5) {
  return u(n7, null, t5);
}
async function D(n7, t5) {
  return m2(n7, void 0, t5);
}

// node_modules/@tauri-apps/api/chunk-42O4WJTY.js
var l = {};
e(l, { checkUpdate: () => c3, installUpdate: () => f2, onUpdaterEvent: () => u2 });
async function u2(n7) {
  return E("tauri://update-status", (e2) => {
    n7(e2 == null ? void 0 : e2.payload);
  });
}
async function f2() {
  let n7;
  function e2() {
    n7 && n7(), n7 = void 0;
  }
  return new Promise((a5, i6) => {
    function o7(r2) {
      if (r2.error)
        return e2(), i6(r2.error);
      if (r2.status === "DONE")
        return e2(), a5();
    }
    u2(o7).then((r2) => {
      n7 = r2;
    }).catch((r2) => {
      throw e2(), r2;
    }), D("tauri://update-install").catch((r2) => {
      throw e2(), r2;
    });
  });
}
async function c3() {
  let n7;
  function e2() {
    n7 && n7(), n7 = void 0;
  }
  return new Promise((a5, i6) => {
    function o7(t5) {
      return e2(), a5({ manifest: t5, shouldUpdate: true });
    }
    function r2(t5) {
      if (t5.error)
        return e2(), i6(t5.error);
      if (t5.status === "UPTODATE")
        return e2(), a5({ shouldUpdate: false });
    }
    _("tauri://update-available", (t5) => {
      o7(t5 == null ? void 0 : t5.payload);
    }).catch((t5) => {
      throw e2(), t5;
    }), u2(r2).then((t5) => {
      n7 = t5;
    }).catch((t5) => {
      throw e2(), t5;
    }), D("tauri://update").catch((t5) => {
      throw e2(), t5;
    });
  });
}

// node_modules/@tauri-apps/api/chunk-QSWLDHGO.js
var C = {};
e(C, { CloseRequestedEvent: () => y, LogicalPosition: () => c4, LogicalSize: () => m3, PhysicalPosition: () => o2, PhysicalSize: () => l2, UserAttentionType: () => W2, WebviewWindow: () => s3, WebviewWindowHandle: () => u3, WindowManager: () => h, appWindow: () => b, availableMonitors: () => T, currentMonitor: () => E2, getAll: () => M, getCurrent: () => f3, primaryMonitor: () => z });
var m3 = class {
  constructor(e2, a5) {
    this.type = "Logical";
    this.width = e2, this.height = a5;
  }
};
var l2 = class {
  constructor(e2, a5) {
    this.type = "Physical";
    this.width = e2, this.height = a5;
  }
  toLogical(e2) {
    return new m3(this.width / e2, this.height / e2);
  }
};
var c4 = class {
  constructor(e2, a5) {
    this.type = "Logical";
    this.x = e2, this.y = a5;
  }
};
var o2 = class {
  constructor(e2, a5) {
    this.type = "Physical";
    this.x = e2, this.y = a5;
  }
  toLogical(e2) {
    return new c4(this.x / e2, this.y / e2);
  }
};
var W2 = ((a5) => (a5[a5.Critical = 1] = "Critical", a5[a5.Informational = 2] = "Informational", a5))(W2 || {});
function f3() {
  return new s3(window.__TAURI_METADATA__.__currentWindow.label, { skip: true });
}
function M() {
  return window.__TAURI_METADATA__.__windows.map((i6) => new s3(i6.label, { skip: true }));
}
var P = ["tauri://created", "tauri://error"];
var u3 = class {
  constructor(e2) {
    this.label = e2, this.listeners = /* @__PURE__ */ Object.create(null);
  }
  async listen(e2, a5) {
    return this._handleTauriEvent(e2, a5) ? Promise.resolve(() => {
      let n7 = this.listeners[e2];
      n7.splice(n7.indexOf(a5), 1);
    }) : o(e2, this.label, a5);
  }
  async once(e2, a5) {
    return this._handleTauriEvent(e2, a5) ? Promise.resolve(() => {
      let n7 = this.listeners[e2];
      n7.splice(n7.indexOf(a5), 1);
    }) : u(e2, this.label, a5);
  }
  async emit(e2, a5) {
    if (P.includes(e2)) {
      for (let n7 of this.listeners[e2] || [])
        n7({ event: e2, id: -1, windowLabel: this.label, payload: a5 });
      return Promise.resolve();
    }
    return m2(e2, this.label, a5);
  }
  _handleTauriEvent(e2, a5) {
    return P.includes(e2) ? (e2 in this.listeners ? this.listeners[e2].push(a5) : this.listeners[e2] = [a5], true) : false;
  }
};
var h = class extends u3 {
  async scaleFactor() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "scaleFactor" } } } });
  }
  async innerPosition() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "innerPosition" } } } }).then(({ x: e2, y: a5 }) => new o2(e2, a5));
  }
  async outerPosition() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "outerPosition" } } } }).then(({ x: e2, y: a5 }) => new o2(e2, a5));
  }
  async innerSize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "innerSize" } } } }).then(({ width: e2, height: a5 }) => new l2(e2, a5));
  }
  async outerSize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "outerSize" } } } }).then(({ width: e2, height: a5 }) => new l2(e2, a5));
  }
  async isFullscreen() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isFullscreen" } } } });
  }
  async isMaximized() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isMaximized" } } } });
  }
  async isDecorated() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isDecorated" } } } });
  }
  async isResizable() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isResizable" } } } });
  }
  async isVisible() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isVisible" } } } });
  }
  async theme() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "theme" } } } });
  }
  async center() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "center" } } } });
  }
  async requestUserAttention(e2) {
    let a5 = null;
    return e2 && (e2 === 1 ? a5 = { type: "Critical" } : a5 = { type: "Informational" }), a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "requestUserAttention", payload: a5 } } } });
  }
  async setResizable(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setResizable", payload: e2 } } } });
  }
  async setTitle(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setTitle", payload: e2 } } } });
  }
  async maximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "maximize" } } } });
  }
  async unmaximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "unmaximize" } } } });
  }
  async toggleMaximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "toggleMaximize" } } } });
  }
  async minimize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "minimize" } } } });
  }
  async unminimize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "unminimize" } } } });
  }
  async show() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "show" } } } });
  }
  async hide() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "hide" } } } });
  }
  async close() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "close" } } } });
  }
  async setDecorations(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setDecorations", payload: e2 } } } });
  }
  async setAlwaysOnTop(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setAlwaysOnTop", payload: e2 } } } });
  }
  async setSize(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setSize", payload: { type: e2.type, data: { width: e2.width, height: e2.height } } } } } });
  }
  async setMinSize(e2) {
    if (e2 && e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMinSize", payload: e2 ? { type: e2.type, data: { width: e2.width, height: e2.height } } : null } } } });
  }
  async setMaxSize(e2) {
    if (e2 && e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMaxSize", payload: e2 ? { type: e2.type, data: { width: e2.width, height: e2.height } } : null } } } });
  }
  async setPosition(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `position` argument must be either a LogicalPosition or a PhysicalPosition instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setPosition", payload: { type: e2.type, data: { x: e2.x, y: e2.y } } } } } });
  }
  async setFullscreen(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setFullscreen", payload: e2 } } } });
  }
  async setFocus() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setFocus" } } } });
  }
  async setIcon(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setIcon", payload: { icon: typeof e2 == "string" ? e2 : Array.from(e2) } } } } });
  }
  async setSkipTaskbar(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setSkipTaskbar", payload: e2 } } } });
  }
  async setCursorGrab(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorGrab", payload: e2 } } } });
  }
  async setCursorVisible(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorVisible", payload: e2 } } } });
  }
  async setCursorIcon(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorIcon", payload: e2 } } } });
  }
  async setCursorPosition(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `position` argument must be either a LogicalPosition or a PhysicalPosition instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorPosition", payload: { type: e2.type, data: { x: e2.x, y: e2.y } } } } } });
  }
  async setIgnoreCursorEvents(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setIgnoreCursorEvents", payload: e2 } } } });
  }
  async startDragging() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "startDragging" } } } });
  }
  async onResized(e2) {
    return this.listen("tauri://resize", e2);
  }
  async onMoved(e2) {
    return this.listen("tauri://move", e2);
  }
  async onCloseRequested(e2) {
    return this.listen("tauri://close-requested", (a5) => {
      let n7 = new y(a5);
      Promise.resolve(e2(n7)).then(() => {
        if (!n7.isPreventDefault())
          return this.close();
      });
    });
  }
  async onFocusChanged(e2) {
    let a5 = await this.listen("tauri://focus", (d2) => {
      e2({ ...d2, payload: true });
    }), n7 = await this.listen("tauri://blur", (d2) => {
      e2({ ...d2, payload: false });
    });
    return () => {
      a5(), n7();
    };
  }
  async onScaleChanged(e2) {
    return this.listen("tauri://scale-change", e2);
  }
  async onMenuClicked(e2) {
    return this.listen("tauri://menu", e2);
  }
  async onFileDropEvent(e2) {
    let a5 = await this.listen("tauri://file-drop", (r2) => {
      e2({ ...r2, payload: { type: "drop", paths: r2.payload } });
    }), n7 = await this.listen("tauri://file-drop-hover", (r2) => {
      e2({ ...r2, payload: { type: "hover", paths: r2.payload } });
    }), d2 = await this.listen("tauri://file-drop-cancelled", (r2) => {
      e2({ ...r2, payload: { type: "cancel" } });
    });
    return () => {
      a5(), n7(), d2();
    };
  }
  async onThemeChanged(e2) {
    return this.listen("tauri://theme-changed", e2);
  }
};
var y = class {
  constructor(e2) {
    this._preventDefault = false;
    this.event = e2.event, this.windowLabel = e2.windowLabel, this.id = e2.id;
  }
  preventDefault() {
    this._preventDefault = true;
  }
  isPreventDefault() {
    return this._preventDefault;
  }
};
var s3 = class extends h {
  constructor(e2, a5 = {}) {
    super(e2), a5 != null && a5.skip || a({ __tauriModule: "Window", message: { cmd: "createWebview", data: { options: { label: e2, ...a5 } } } }).then(async () => this.emit("tauri://created")).catch(async (n7) => this.emit("tauri://error", n7));
  }
  static getByLabel(e2) {
    return M().some((a5) => a5.label === e2) ? new s3(e2, { skip: true }) : null;
  }
};
var b;
"__TAURI_METADATA__" in window ? b = new s3(window.__TAURI_METADATA__.__currentWindow.label, { skip: true }) : (console.warn(`Could not find "window.__TAURI_METADATA__". The "appWindow" value will reference the "main" window label.
Note that this is not an issue if running this frontend on a browser instead of a Tauri window.`), b = new s3("main", { skip: true }));
function g(i6) {
  return i6 === null ? null : { name: i6.name, scaleFactor: i6.scaleFactor, position: new o2(i6.position.x, i6.position.y), size: new l2(i6.size.width, i6.size.height) };
}
async function E2() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "currentMonitor" } } } }).then(g);
}
async function z() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "primaryMonitor" } } } }).then(g);
}
async function T() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "availableMonitors" } } } }).then((i6) => i6.map(g));
}

// node_modules/@tauri-apps/api/chunk-VOSOL2C7.js
var s4 = {};
e(s4, { isPermissionGranted: () => o3, requestPermission: () => t, sendNotification: () => r });
async function o3() {
  return window.Notification.permission !== "default" ? Promise.resolve(window.Notification.permission === "granted") : a({ __tauriModule: "Notification", message: { cmd: "isNotificationPermissionGranted" } });
}
async function t() {
  return window.Notification.requestPermission();
}
function r(i6) {
  typeof i6 == "string" ? new window.Notification(i6) : new window.Notification(i6.title, i6);
}

// node_modules/@tauri-apps/api/chunk-J5WVX3SY.js
var c5 = {};
e(c5, { EOL: () => n2, arch: () => a2, platform: () => o4, tempdir: () => m4, type: () => t2, version: () => i });
var n2 = n() ? `\r
` : `
`;
async function o4() {
  return a({ __tauriModule: "Os", message: { cmd: "platform" } });
}
async function i() {
  return a({ __tauriModule: "Os", message: { cmd: "version" } });
}
async function t2() {
  return a({ __tauriModule: "Os", message: { cmd: "osType" } });
}
async function a2() {
  return a({ __tauriModule: "Os", message: { cmd: "arch" } });
}
async function m4() {
  return a({ __tauriModule: "Os", message: { cmd: "tempdir" } });
}

// node_modules/@tauri-apps/api/chunk-PGWTMLF7.js
var s5 = {};
e(s5, { exit: () => i2, relaunch: () => n3 });
async function i2(r2 = 0) {
  return a({ __tauriModule: "Process", message: { cmd: "exit", exitCode: r2 } });
}
async function n3() {
  return a({ __tauriModule: "Process", message: { cmd: "relaunch" } });
}

// node_modules/@tauri-apps/api/chunk-QD7IZWSV.js
var u4 = {};
e(u4, { getName: () => n4, getTauriVersion: () => s6, getVersion: () => i3, hide: () => t3, show: () => o5 });
async function i3() {
  return a({ __tauriModule: "App", message: { cmd: "getAppVersion" } });
}
async function n4() {
  return a({ __tauriModule: "App", message: { cmd: "getAppName" } });
}
async function s6() {
  return a({ __tauriModule: "App", message: { cmd: "getTauriVersion" } });
}
async function o5() {
  return a({ __tauriModule: "App", message: { cmd: "show" } });
}
async function t3() {
  return a({ __tauriModule: "App", message: { cmd: "hide" } });
}

// node_modules/@tauri-apps/api/chunk-7P2O4Y2W.js
var c6 = {};
e(c6, { getMatches: () => t4 });
async function t4() {
  return a({ __tauriModule: "Cli", message: { cmd: "cliMatches" } });
}

// node_modules/@tauri-apps/api/chunk-KJJ7PFLW.js
var n5 = {};
e(n5, { readText: () => i4, writeText: () => a3 });
async function a3(r2) {
  return a({ __tauriModule: "Clipboard", message: { cmd: "writeText", data: r2 } });
}
async function i4() {
  return a({ __tauriModule: "Clipboard", message: { cmd: "readText", data: null } });
}

// node_modules/@tauri-apps/api/chunk-ZXBJS677.js
var m5 = {};
e(m5, { ask: () => l3, confirm: () => c7, message: () => s7, open: () => g2, save: () => o6 });
async function g2(i6 = {}) {
  return typeof i6 == "object" && Object.freeze(i6), a({ __tauriModule: "Dialog", message: { cmd: "openDialog", options: i6 } });
}
async function o6(i6 = {}) {
  return typeof i6 == "object" && Object.freeze(i6), a({ __tauriModule: "Dialog", message: { cmd: "saveDialog", options: i6 } });
}
async function s7(i6, t5) {
  var n7;
  let e2 = typeof t5 == "string" ? { title: t5 } : t5;
  return a({ __tauriModule: "Dialog", message: { cmd: "messageDialog", message: i6.toString(), title: (n7 = e2 == null ? void 0 : e2.title) == null ? void 0 : n7.toString(), type: e2 == null ? void 0 : e2.type } });
}
async function l3(i6, t5) {
  var n7;
  let e2 = typeof t5 == "string" ? { title: t5 } : t5;
  return a({ __tauriModule: "Dialog", message: { cmd: "askDialog", message: i6.toString(), title: (n7 = e2 == null ? void 0 : e2.title) == null ? void 0 : n7.toString(), type: e2 == null ? void 0 : e2.type } });
}
async function c7(i6, t5) {
  var n7;
  let e2 = typeof t5 == "string" ? { title: t5 } : t5;
  return a({ __tauriModule: "Dialog", message: { cmd: "confirmDialog", message: i6.toString(), title: (n7 = e2 == null ? void 0 : e2.title) == null ? void 0 : n7.toString(), type: e2 == null ? void 0 : e2.type } });
}

// node_modules/@tauri-apps/api/chunk-HIKF4RX7.js
var c8 = {};
e(c8, { isRegistered: () => u5, register: () => s8, registerAll: () => n6, unregister: () => a4, unregisterAll: () => l4 });
async function s8(r2, t5) {
  return a({ __tauriModule: "GlobalShortcut", message: { cmd: "register", shortcut: r2, handler: s(t5) } });
}
async function n6(r2, t5) {
  return a({ __tauriModule: "GlobalShortcut", message: { cmd: "registerAll", shortcuts: r2, handler: s(t5) } });
}
async function u5(r2) {
  return a({ __tauriModule: "GlobalShortcut", message: { cmd: "isRegistered", shortcut: r2 } });
}
async function a4(r2) {
  return a({ __tauriModule: "GlobalShortcut", message: { cmd: "unregister", shortcut: r2 } });
}
async function l4() {
  return a({ __tauriModule: "GlobalShortcut", message: { cmd: "unregisterAll" } });
}

// node_modules/@tauri-apps/api/chunk-YIDC66OP.js
var T2 = {};
e(T2, { Body: () => i5, Client: () => l5, Response: () => m6, ResponseType: () => p, fetch: () => y2, getClient: () => d });
var p = ((s9) => (s9[s9.JSON = 1] = "JSON", s9[s9.Text = 2] = "Text", s9[s9.Binary = 3] = "Binary", s9))(p || {});
var i5 = class {
  constructor(e2, r2) {
    this.type = e2, this.payload = r2;
  }
  static form(e2) {
    let r2 = {}, s9 = (n7, t5) => {
      if (t5 !== null) {
        let a5;
        typeof t5 == "string" ? a5 = t5 : t5 instanceof Uint8Array || Array.isArray(t5) ? a5 = Array.from(t5) : t5 instanceof File ? a5 = { file: t5.name, mime: t5.type, fileName: t5.name } : typeof t5.file == "string" ? a5 = { file: t5.file, mime: t5.mime, fileName: t5.fileName } : a5 = { file: Array.from(t5.file), mime: t5.mime, fileName: t5.fileName }, r2[String(n7)] = a5;
      }
    };
    if (e2 instanceof FormData)
      for (let [n7, t5] of e2)
        s9(n7, t5);
    else
      for (let [n7, t5] of Object.entries(e2))
        s9(n7, t5);
    return new i5("Form", r2);
  }
  static json(e2) {
    return new i5("Json", e2);
  }
  static text(e2) {
    return new i5("Text", e2);
  }
  static bytes(e2) {
    return new i5("Bytes", Array.from(e2 instanceof ArrayBuffer ? new Uint8Array(e2) : e2));
  }
};
var m6 = class {
  constructor(e2) {
    this.url = e2.url, this.status = e2.status, this.ok = this.status >= 200 && this.status < 300, this.headers = e2.headers, this.rawHeaders = e2.rawHeaders, this.data = e2.data;
  }
};
var l5 = class {
  constructor(e2) {
    this.id = e2;
  }
  async drop() {
    return a({ __tauriModule: "Http", message: { cmd: "dropClient", client: this.id } });
  }
  async request(e2) {
    let r2 = !e2.responseType || e2.responseType === 1;
    return r2 && (e2.responseType = 2), a({ __tauriModule: "Http", message: { cmd: "httpRequest", client: this.id, options: e2 } }).then((s9) => {
      let n7 = new m6(s9);
      if (r2) {
        try {
          n7.data = JSON.parse(n7.data);
        } catch (t5) {
          if (n7.ok && n7.data === "")
            n7.data = {};
          else if (n7.ok)
            throw Error(`Failed to parse response \`${n7.data}\` as JSON: ${t5};
              try setting the \`responseType\` option to \`ResponseType.Text\` or \`ResponseType.Binary\` if the API does not return a JSON response.`);
        }
        return n7;
      }
      return n7;
    });
  }
  async get(e2, r2) {
    return this.request({ method: "GET", url: e2, ...r2 });
  }
  async post(e2, r2, s9) {
    return this.request({ method: "POST", url: e2, body: r2, ...s9 });
  }
  async put(e2, r2, s9) {
    return this.request({ method: "PUT", url: e2, body: r2, ...s9 });
  }
  async patch(e2, r2) {
    return this.request({ method: "PATCH", url: e2, ...r2 });
  }
  async delete(e2, r2) {
    return this.request({ method: "DELETE", url: e2, ...r2 });
  }
};
async function d(o7) {
  return a({ __tauriModule: "Http", message: { cmd: "createClient", options: o7 } }).then((e2) => new l5(e2));
}
var c9 = null;
async function y2(o7, e2) {
  return c9 === null && (c9 = await d()), c9.request({ url: o7, method: (e2 == null ? void 0 : e2.method) ?? "GET", ...e2 });
}

// node_modules/@tauri-apps/api/index.js
var b2 = c;
export {
  u4 as app,
  c6 as cli,
  n5 as clipboard,
  m5 as dialog,
  W as event,
  x as fs,
  c8 as globalShortcut,
  T2 as http,
  b2 as invoke,
  s4 as notification,
  c5 as os,
  q as path,
  s5 as process,
  m as shell,
  f as tauri,
  l as updater,
  C as window
};
//# sourceMappingURL=@tauri-apps_api.js.map
