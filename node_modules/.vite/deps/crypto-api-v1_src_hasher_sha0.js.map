{
  "version": 3,
  "sources": ["../../crypto-api-v1/src/hasher/hasher.mjs", "../../crypto-api-v1/src/hasher/hasher32be.mjs", "../../crypto-api-v1/src/tools/tools.mjs", "../../crypto-api-v1/src/hasher/sha0.mjs"],
  "sourcesContent": ["'use strict';\n\n/**\n * Base hasher class\n * @interface\n */\nclass Hasher {\n  /**\n   * @param {Object} options\n   * @constructor\n   */\n  constructor(options) {\n    /**\n     * Size of unit in bytes (4 = 32 bits)\n     * @type {number}\n     */\n    this.unitSize = 4;\n    /**\n     * Bytes order in unit\n     *   0 - normal\n     *   1 - reverse\n     * @type {number}\n     */\n    this.unitOrder = 0;\n    /**\n     * Size of block in units\n     * @type {number}\n     */\n    this.blockSize = 16;\n    /**\n     * Size of block in bytes\n     * @type {number}\n     */\n    this.blockSizeInBytes = this.blockSize * this.unitSize;\n\n    this.options = options || {};\n\n    this.reset();\n  }\n\n  /**\n   * Reset hasher to initial state\n   */\n  reset() {\n    /**\n     * All algorithm variables that changed during process\n     * @protected\n     * @type {Object}\n     * @property {string} state.message - Unprocessed Message\n     * @property {number} state.length - Length of message\n     */\n    this.state = {};\n    this.state.message = '';\n    this.state.length = 0;\n    /**\n     * Options from initialization\n     * @protected\n     * @type {Object}\n     */\n  }\n\n  /**\n   * Return current state\n   *\n   * @returns {Object}\n   */\n  getState() {\n    return JSON.parse(JSON.stringify(this.state));\n  }\n\n  /**\n   * Set current state\n   *\n   * @param {Object} state\n   */\n  setState(state) {\n    this.state = state;\n  }\n\n  /**\n   * Update message from binary string\n   *\n   * @param {string} message\n   */\n  update(message) {\n    this.state.message += message;\n    this.state.length += message.length;\n    this.process();\n  }\n\n  /**\n   * Process ready blocks\n   *\n   * @protected\n   */\n  process() {\n  }\n\n  /**\n   * Finalize hash and return result\n   *\n   * @returns {string}\n   */\n  finalize() {\n    return '';\n  }\n\n  /**\n   * Get hash from state\n   *\n   * @protected\n   * @param {number} [size=this.state.hash.length] - Limit hash size (in chunks)\n   * @returns {string}\n   */\n  getStateHash(size) {\n    return '';\n  }\n\n  /**\n   * Add PKCS7 padding to message\n   * Pad with bytes all of the same value as the number of padding bytes\n   *\n   * @protected\n   * @param {number} length\n   */\n  addPaddingPKCS7(length) {\n    this.state.message += new Array(length + 1).join(String.fromCharCode(length));\n  }\n\n  /**\n   * Add ISO7816-4 padding to message\n   * Pad with 0x80 followed by zero bytes\n   *\n   * @protected\n   * @param {number} length\n   */\n  addPaddingISO7816(length) {\n    this.state.message += \"\\x80\" + new Array(length).join(\"\\x00\");\n  }\n\n  /**\n   * Add zero padding to message\n   * Pad with 0x00 characters\n   *\n   * @protected\n   * @param {number} length\n   */\n  addPaddingZero(length) {\n    this.state.message += new Array(length + 1).join(\"\\x00\");\n  }\n}\n\nexport default Hasher;", "'use strict';\n\nimport Hasher from \"./hasher.mjs\";\n\n/**\n * Hasher for 32 bit big endian blocks\n * @interface\n */\nclass Hasher32be extends Hasher {\n  /**\n   * @param {Object} [options]\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * Reverse order of bytes\n     * @type {number}\n     */\n    this.unitOrder = 1;\n    /**\n     * Current block (only for speed optimization)\n     * @private\n     * @type {number[]}\n     */\n    this.blockUnits = [];\n  }\n\n  /**\n   * Process ready blocks\n   *\n   * @protected\n   */\n  process() {\n    while (this.state.message.length >= this.blockSizeInBytes) {\n      this.blockUnits = [];\n      for (let b = 0; b < this.blockSizeInBytes; b += 4) {\n        this.blockUnits.push(\n          this.state.message.charCodeAt(b) << 24 |\n          this.state.message.charCodeAt(b + 1) << 16 |\n          this.state.message.charCodeAt(b + 2) << 8 |\n          this.state.message.charCodeAt(b + 3));\n      }\n      this.state.message = this.state.message.substr(this.blockSizeInBytes);\n      this.processBlock(this.blockUnits);\n    }\n  }\n\n  /**\n   * Process ready blocks\n   *\n   * @protected\n   * @param {number[]} M\n   */\n  processBlock(M) {\n  }\n\n  /**\n   * Get hash from state\n   *\n   * @protected\n   * @param {number} [size=this.state.hash.length] - Limit hash size (in chunks)\n   * @returns {string}\n   */\n  getStateHash(size) {\n    size = size || this.state.hash.length;\n    let hash = '';\n    for (let i = 0; i < size; i++) {\n      hash += String.fromCharCode(this.state.hash[i] >> 24 & 0xff) +\n        String.fromCharCode(this.state.hash[i] >> 16 & 0xff) +\n        String.fromCharCode(this.state.hash[i] >> 8 & 0xff) +\n        String.fromCharCode(this.state.hash[i] & 0xff);\n    }\n    return hash;\n  }\n\n  /**\n   * Add to message cumulative size of message in bits\n   *\n   * @protected\n   */\n  addLengthBits() {\n    // @todo fix length to 64 bit\n    this.state.message += \"\\x00\\x00\\x00\" +\n      String.fromCharCode(this.state.length >> 29 & 0xff) +\n      String.fromCharCode(this.state.length >> 21 & 0xff) +\n      String.fromCharCode(this.state.length >> 13 & 0xff) +\n      String.fromCharCode(this.state.length >> 5 & 0xff) +\n      String.fromCharCode(this.state.length << 3 & 0xff);\n  }\n}\n\nexport default Hasher32be;", "'use strict';\n\n/**\n * Rotate x to n bits left\n *\n * @param {number} x\n * @param {number} n\n * @returns {number}\n */\nfunction rotateLeft(x, n) {\n  return ((x << n) | (x >>> (32 - n))) | 0;\n}\n\n/**\n * Rotate x to n bits right\n * @param {number} x\n * @param {number} n\n * @returns {number}\n */\nfunction rotateRight(x, n) {\n  return ((x >>> n) | (x << (32 - n))) | 0;\n}\n\n/**\n * Rotate 64bit to n bits right and return hi\n *\n * @param {number} hi\n * @param {number} lo\n * @param {number} n\n * @returns {number}\n */\nfunction rotateRight64hi(hi, lo, n) {\n  if (n === 32) {\n    return lo;\n  }\n  if (n > 32) {\n    return rotateRight64hi(lo, hi, n - 32);\n  }\n  return ((hi >>> n) | (lo << (32 - n))) & (0xFFFFFFFF);\n}\n\n/**\n * Rotate 64bit to n bits right and return lo\n *\n * @param {number} hi\n * @param {number} lo\n * @param {number} n\n * @returns {number}\n */\nfunction rotateRight64lo(hi, lo, n) {\n  if (n === 32) {\n    return hi;\n  }\n  if (n > 32) {\n    return rotateRight64lo(lo, hi, n - 32);\n  }\n  return ((lo >>> n) | (hi << (32 - n))) & (0xFFFFFFFF);\n}\n\nexport {rotateLeft, rotateRight, rotateRight64lo, rotateRight64hi};", "'use strict';\n\nimport Hasher32be from \"./hasher32be.mjs\";\nimport {rotateLeft} from \"../tools/tools.mjs\";\n\n// Transform constants\n/** @type {number[]} */\nconst K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n\n/**\n * Calculates [SHA0](http://pages.saclay.inria.fr/pierre.karpman/fips180.pdf) hash\n *\n * @example <caption>Calculates SHA0 hash from string \"message\" - ES6 style</caption>\n * import Sha0 from \"crypto-api/src/hasher/sha0\";\n * import {toHex} from \"crypto-api/src/encoder/hex\";\n *\n * let hasher = new Sha0();\n * hasher.update('message');\n * console.log(toHex(hasher.finalize()));\n *\n * @example <caption>Calculates SHA0 hash from UTF string \"message\" - ES6 style</caption>\n * import Sha0 from \"crypto-api/src/hasher/sha0\";\n * import {toHex} from \"crypto-api/src/encoder/hex\";\n * import {fromUtf} from \"crypto-api/src/encoder/utf\";\n *\n * let hasher = new Sha0();\n * hasher.update(fromUtf('message'));\n * console.log(toHex(hasher.finalize()));\n *\n * @example <caption>Calculates SHA0 hash from string \"message\" - ES5 style</caption>\n * <script src=\"https://nf404.github.io/crypto-api/crypto-api.min.js\"></script>\n * <script>\n *   var hasher = CryptoApi.getHasher('sha0');\n *   hasher.update('message');\n *   console.log(CryptoApi.encoder.toHex(hasher.finalize()));\n * </script>\n *\n * @example <caption>Calculates SHA0 hash from UTF string \"message\" - ES5 style</caption>\n * <script src=\"https://nf404.github.io/crypto-api/crypto-api.min.js\"></script>\n * <script>\n *   console.log(CryptoApi.hash('sha0', 'message'));\n * </script>\n */\nclass Sha0 extends Hasher32be {\n  /**\n   * @param {Object} [options]\n   * @param {number} [options.rounds=80] - Number of rounds (Must be greater than 16)\n   */\n  constructor(options) {\n    super(options);\n\n    this.options.rounds = this.options.rounds || 80;\n\n    /**\n     * Working variable (only for speed optimization)\n     * @private\n     * @ignore\n     * @type {number[]}\n     */\n    this.W = new Array(80);\n  }\n\n  /**\n   * Reset hasher to initial state\n   */\n  reset() {\n    super.reset();\n    this.state.hash = [\n      0x67452301 | 0,\n      0xefcdab89 | 0,\n      0x98badcfe | 0,\n      0x10325476 | 0,\n      0xc3d2e1f0 | 0\n    ];\n  }\n\n  /**\n   * Process ready blocks\n   *\n   * @protected\n   * @ignore\n   * @param {number[]} block - Block\n   */\n  processBlock(block) {\n    // Working variables\n    let a = this.state.hash[0] | 0;\n    let b = this.state.hash[1] | 0;\n    let c = this.state.hash[2] | 0;\n    let d = this.state.hash[3] | 0;\n    let e = this.state.hash[4] | 0;\n\n    // Calculate hash\n    for (let i = 0; i < this.options.rounds; i++) {\n      if (i < 16) {\n        this.W[i] = block[i] | 0;\n      } else {\n        this.W[i] = (this.W[i - 3] ^ this.W[i - 8] ^ this.W[i - 14] ^ this.W[i - 16]) | 0;\n      }\n\n      let t = (rotateLeft(a, 5) + e + this.W[i] + K[(i / 20) >> 0]) | 0;\n      if (i < 20) {\n        t = (t + ((b & c) | (~b & d))) | 0;\n      } else if (i < 40) {\n        t = (t + (b ^ c ^ d)) | 0;\n      } else if (i < 60) {\n        t = (t + ((b & c) | (b & d) | (c & d))) | 0;\n      } else {\n        t = (t + (b ^ c ^ d)) | 0;\n      }\n      e = d;\n      d = c;\n      c = rotateLeft(b, 30) | 0;\n      b = a;\n      a = t;\n    }\n\n    this.state.hash[0] = (this.state.hash[0] + a) | 0;\n    this.state.hash[1] = (this.state.hash[1] + b) | 0;\n    this.state.hash[2] = (this.state.hash[2] + c) | 0;\n    this.state.hash[3] = (this.state.hash[3] + d) | 0;\n    this.state.hash[4] = (this.state.hash[4] + e) | 0;\n  }\n\n  /**\n   * Finalize hash and return result\n   *\n   * @returns {string}\n   */\n  finalize() {\n    this.addPaddingISO7816(\n      this.state.message.length < 56 ?\n        56 - this.state.message.length | 0 :\n        120 - this.state.message.length | 0);\n    this.addLengthBits();\n    this.process();\n    return this.getStateHash();\n  }\n}\n\nexport default Sha0;"],
  "mappings": ";;;AAMA,IAAM,SAAN,MAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKX,YAAY,SAAS;AAKnB,SAAK,WAAW;AAOhB,SAAK,YAAY;AAKjB,SAAK,YAAY;AAKjB,SAAK,mBAAmB,KAAK,YAAY,KAAK;AAE9C,SAAK,UAAU,WAAW,CAAC;AAE3B,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AAQN,SAAK,QAAQ,CAAC;AACd,SAAK,MAAM,UAAU;AACrB,SAAK,MAAM,SAAS;AAAA,EAMtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW;AACT,WAAO,KAAK,MAAM,KAAK,UAAU,KAAK,KAAK,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,OAAO;AACd,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,SAAS;AACd,SAAK,MAAM,WAAW;AACtB,SAAK,MAAM,UAAU,QAAQ;AAC7B,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW;AACT,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,MAAM;AACjB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gBAAgB,QAAQ;AACtB,SAAK,MAAM,WAAW,IAAI,MAAM,SAAS,CAAC,EAAE,KAAK,OAAO,aAAa,MAAM,CAAC;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,kBAAkB,QAAQ;AACxB,SAAK,MAAM,WAAW,MAAS,IAAI,MAAM,MAAM,EAAE,KAAK,IAAM;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe,QAAQ;AACrB,SAAK,MAAM,WAAW,IAAI,MAAM,SAAS,CAAC,EAAE,KAAK,IAAM;AAAA,EACzD;AACF;AAEA,IAAO,iBAAQ;;;AChJf,IAAM,aAAN,cAAyB,eAAO;AAAA;AAAA;AAAA;AAAA,EAI9B,YAAY,SAAS;AACnB,UAAM,OAAO;AAMb,SAAK,YAAY;AAMjB,SAAK,aAAa,CAAC;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU;AACR,WAAO,KAAK,MAAM,QAAQ,UAAU,KAAK,kBAAkB;AACzD,WAAK,aAAa,CAAC;AACnB,eAAS,IAAI,GAAG,IAAI,KAAK,kBAAkB,KAAK,GAAG;AACjD,aAAK,WAAW;AAAA,UACd,KAAK,MAAM,QAAQ,WAAW,CAAC,KAAK,KACpC,KAAK,MAAM,QAAQ,WAAW,IAAI,CAAC,KAAK,KACxC,KAAK,MAAM,QAAQ,WAAW,IAAI,CAAC,KAAK,IACxC,KAAK,MAAM,QAAQ,WAAW,IAAI,CAAC;AAAA,QAAC;AAAA,MACxC;AACA,WAAK,MAAM,UAAU,KAAK,MAAM,QAAQ,OAAO,KAAK,gBAAgB;AACpE,WAAK,aAAa,KAAK,UAAU;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,GAAG;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,MAAM;AACjB,WAAO,QAAQ,KAAK,MAAM,KAAK;AAC/B,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,cAAQ,OAAO,aAAa,KAAK,MAAM,KAAK,CAAC,KAAK,KAAK,GAAI,IACzD,OAAO,aAAa,KAAK,MAAM,KAAK,CAAC,KAAK,KAAK,GAAI,IACnD,OAAO,aAAa,KAAK,MAAM,KAAK,CAAC,KAAK,IAAI,GAAI,IAClD,OAAO,aAAa,KAAK,MAAM,KAAK,CAAC,IAAI,GAAI;AAAA,IACjD;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB;AAEd,SAAK,MAAM,WAAW,WACpB,OAAO,aAAa,KAAK,MAAM,UAAU,KAAK,GAAI,IAClD,OAAO,aAAa,KAAK,MAAM,UAAU,KAAK,GAAI,IAClD,OAAO,aAAa,KAAK,MAAM,UAAU,KAAK,GAAI,IAClD,OAAO,aAAa,KAAK,MAAM,UAAU,IAAI,GAAI,IACjD,OAAO,aAAa,KAAK,MAAM,UAAU,IAAI,GAAI;AAAA,EACrD;AACF;AAEA,IAAO,qBAAQ;;;ACnFf,SAAS,WAAW,GAAG,GAAG;AACxB,SAAS,KAAK,IAAM,MAAO,KAAK,IAAO;AACzC;;;ACJA,IAAM,IAAI,CAAC,YAAY,YAAY,YAAY,UAAU;AAoCzD,IAAM,OAAN,cAAmB,mBAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAK5B,YAAY,SAAS;AACnB,UAAM,OAAO;AAEb,SAAK,QAAQ,SAAS,KAAK,QAAQ,UAAU;AAQ7C,SAAK,IAAI,IAAI,MAAM,EAAE;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,UAAM,MAAM;AACZ,SAAK,MAAM,OAAO;AAAA,MAChB,aAAa;AAAA,MACb,aAAa;AAAA,MACb,aAAa;AAAA,MACb,YAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,OAAO;AAElB,QAAI,IAAI,KAAK,MAAM,KAAK,CAAC,IAAI;AAC7B,QAAI,IAAI,KAAK,MAAM,KAAK,CAAC,IAAI;AAC7B,QAAI,IAAI,KAAK,MAAM,KAAK,CAAC,IAAI;AAC7B,QAAI,IAAI,KAAK,MAAM,KAAK,CAAC,IAAI;AAC7B,QAAI,IAAI,KAAK,MAAM,KAAK,CAAC,IAAI;AAG7B,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,UAAI,IAAI,IAAI;AACV,aAAK,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI;AAAA,MACzB,OAAO;AACL,aAAK,EAAE,CAAC,IAAK,KAAK,EAAE,IAAI,CAAC,IAAI,KAAK,EAAE,IAAI,CAAC,IAAI,KAAK,EAAE,IAAI,EAAE,IAAI,KAAK,EAAE,IAAI,EAAE,IAAK;AAAA,MAClF;AAEA,UAAI,IAAK,WAAW,GAAG,CAAC,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,EAAG,IAAI,MAAO,CAAC,IAAK;AAChE,UAAI,IAAI,IAAI;AACV,YAAK,KAAM,IAAI,IAAM,CAAC,IAAI,KAAO;AAAA,MACnC,WAAW,IAAI,IAAI;AACjB,YAAK,KAAK,IAAI,IAAI,KAAM;AAAA,MAC1B,WAAW,IAAI,IAAI;AACjB,YAAK,KAAM,IAAI,IAAM,IAAI,IAAM,IAAI,KAAO;AAAA,MAC5C,OAAO;AACL,YAAK,KAAK,IAAI,IAAI,KAAM;AAAA,MAC1B;AACA,UAAI;AACJ,UAAI;AACJ,UAAI,WAAW,GAAG,EAAE,IAAI;AACxB,UAAI;AACJ,UAAI;AAAA,IACN;AAEA,SAAK,MAAM,KAAK,CAAC,IAAK,KAAK,MAAM,KAAK,CAAC,IAAI,IAAK;AAChD,SAAK,MAAM,KAAK,CAAC,IAAK,KAAK,MAAM,KAAK,CAAC,IAAI,IAAK;AAChD,SAAK,MAAM,KAAK,CAAC,IAAK,KAAK,MAAM,KAAK,CAAC,IAAI,IAAK;AAChD,SAAK,MAAM,KAAK,CAAC,IAAK,KAAK,MAAM,KAAK,CAAC,IAAI,IAAK;AAChD,SAAK,MAAM,KAAK,CAAC,IAAK,KAAK,MAAM,KAAK,CAAC,IAAI,IAAK;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW;AACT,SAAK;AAAA,MACH,KAAK,MAAM,QAAQ,SAAS,KAC1B,KAAK,KAAK,MAAM,QAAQ,SAAS,IACjC,MAAM,KAAK,MAAM,QAAQ,SAAS;AAAA,IAAC;AACvC,SAAK,cAAc;AACnB,SAAK,QAAQ;AACb,WAAO,KAAK,aAAa;AAAA,EAC3B;AACF;AAEA,IAAO,eAAQ;",
  "names": []
}
