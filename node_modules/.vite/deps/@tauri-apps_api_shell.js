// node_modules/@tauri-apps/api/chunk-FEIY7W7S.js
var d = Object.defineProperty;
var e = (c2, a2) => {
  for (var b in a2)
    d(c2, b, { get: a2[b], enumerable: true });
};

// node_modules/@tauri-apps/api/chunk-RCPA6UVN.js
var f = {};
e(f, { convertFileSrc: () => w, invoke: () => c, transformCallback: () => s });
function u() {
  return window.crypto.getRandomValues(new Uint32Array(1))[0];
}
function s(e2, r = false) {
  let n = u(), t = `_${n}`;
  return Object.defineProperty(window, t, { value: (o) => (r && Reflect.deleteProperty(window, t), e2 == null ? void 0 : e2(o)), writable: false, configurable: true }), n;
}
async function c(e2, r = {}) {
  return new Promise((n, t) => {
    let o = s((i2) => {
      n(i2), Reflect.deleteProperty(window, `_${a2}`);
    }, true), a2 = s((i2) => {
      t(i2), Reflect.deleteProperty(window, `_${o}`);
    }, true);
    window.__TAURI_IPC__({ cmd: e2, callback: o, error: a2, ...r });
  });
}
function w(e2, r = "asset") {
  let n = encodeURIComponent(e2);
  return navigator.userAgent.includes("Windows") ? `https://${r}.localhost/${n}` : `${r}://localhost/${n}`;
}

// node_modules/@tauri-apps/api/chunk-HNLFKTAJ.js
async function a(i2) {
  return c("tauri", i2);
}

// node_modules/@tauri-apps/api/chunk-ATGUPOGX.js
var m = {};
e(m, { Child: () => h, Command: () => l, EventEmitter: () => i, open: () => g });
async function p(o, e2, t = [], r) {
  return typeof t == "object" && Object.freeze(t), a({ __tauriModule: "Shell", message: { cmd: "execute", program: e2, args: t, options: r, onEventFn: s(o) } });
}
var i = class {
  constructor() {
    this.eventListeners = /* @__PURE__ */ Object.create(null);
  }
  addListener(e2, t) {
    return this.on(e2, t);
  }
  removeListener(e2, t) {
    return this.off(e2, t);
  }
  on(e2, t) {
    return e2 in this.eventListeners ? this.eventListeners[e2].push(t) : this.eventListeners[e2] = [t], this;
  }
  once(e2, t) {
    let r = (...s2) => {
      this.removeListener(e2, r), t(...s2);
    };
    return this.addListener(e2, r);
  }
  off(e2, t) {
    return e2 in this.eventListeners && (this.eventListeners[e2] = this.eventListeners[e2].filter((r) => r !== t)), this;
  }
  removeAllListeners(e2) {
    return e2 ? delete this.eventListeners[e2] : this.eventListeners = /* @__PURE__ */ Object.create(null), this;
  }
  emit(e2, ...t) {
    if (e2 in this.eventListeners) {
      let r = this.eventListeners[e2];
      for (let s2 of r)
        s2(...t);
      return true;
    }
    return false;
  }
  listenerCount(e2) {
    return e2 in this.eventListeners ? this.eventListeners[e2].length : 0;
  }
  prependListener(e2, t) {
    return e2 in this.eventListeners ? this.eventListeners[e2].unshift(t) : this.eventListeners[e2] = [t], this;
  }
  prependOnceListener(e2, t) {
    let r = (...s2) => {
      this.removeListener(e2, r), t(...s2);
    };
    return this.prependListener(e2, r);
  }
};
var h = class {
  constructor(e2) {
    this.pid = e2;
  }
  async write(e2) {
    return a({ __tauriModule: "Shell", message: { cmd: "stdinWrite", pid: this.pid, buffer: typeof e2 == "string" ? e2 : Array.from(e2) } });
  }
  async kill() {
    return a({ __tauriModule: "Shell", message: { cmd: "killChild", pid: this.pid } });
  }
};
var l = class extends i {
  constructor(t, r = [], s2) {
    super();
    this.stdout = new i();
    this.stderr = new i();
    this.program = t, this.args = typeof r == "string" ? [r] : r, this.options = s2 ?? {};
  }
  static sidecar(t, r = [], s2) {
    let a2 = new l(t, r, s2);
    return a2.options.sidecar = true, a2;
  }
  async spawn() {
    return p((t) => {
      switch (t.event) {
        case "Error":
          this.emit("error", t.payload);
          break;
        case "Terminated":
          this.emit("close", t.payload);
          break;
        case "Stdout":
          this.stdout.emit("data", t.payload);
          break;
        case "Stderr":
          this.stderr.emit("data", t.payload);
          break;
      }
    }, this.program, this.args, this.options).then((t) => new h(t));
  }
  async execute() {
    return new Promise((t, r) => {
      this.on("error", r);
      let s2 = [], a2 = [];
      this.stdout.on("data", (n) => {
        s2.push(n);
      }), this.stderr.on("data", (n) => {
        a2.push(n);
      }), this.on("close", (n) => {
        t({ code: n.code, signal: n.signal, stdout: s2.join(`
`), stderr: a2.join(`
`) });
      }), this.spawn().catch(r);
    });
  }
};
async function g(o, e2) {
  return a({ __tauriModule: "Shell", message: { cmd: "open", path: o, with: e2 } });
}
export {
  h as Child,
  l as Command,
  i as EventEmitter,
  g as open
};
//# sourceMappingURL=@tauri-apps_api_shell.js.map
